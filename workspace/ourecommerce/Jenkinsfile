pipeline {
    agent any

    tools {
        maven 'Maven 3.8.1'  // Specify your Maven version
    }

    environment {
        CHANGED_MODULES = ''
        MINIKUBE_IP = sh(script: "minikube ip", returnStdout: true).trim()
        REPORT_FILE = 'failure_report.txt'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the repository using the SCM configuration set in Jenkins
                checkout scm

                script {
                    // Detect changes between the current commit and the previous commit
                    CHANGED_MODULES = sh(script: "git diff --name-only HEAD~1 HEAD | grep '^[^/]*'", returnStdout: true).trim()
                    if (!CHANGED_MODULES) {
                        echo 'No changes detected in any modules.'
                        currentBuild.result = 'SUCCESS'
                        return
                    }
                }
            }
        }

        stage('Build Changed Modules') {
            steps {
                script {
                    // List the changed modules (subdirectories)
                    def modules = CHANGED_MODULES.tokenize('\n').join(',')
                    echo "Building the following modules: ${modules}"

                    // Run Maven, only building the changed modules and their dependencies
                    try {
                        sh "mvn clean install -pl ${modules} -am"
                    } catch (Exception e) {
                        // Handle Maven build failure
                        echo 'Maven build failed! Rolling back and generating failure report.'
                        writeFile file: REPORT_FILE, text: "Build failed for modules: ${modules}\nError: ${e.getMessage()}"
                        currentBuild.result = 'FAILURE'
                        error 'Stopping the pipeline due to Maven build failure.'
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def modules = CHANGED_MODULES.tokenize('\n')
                    for (module in modules) {
                        // Check if the module has a Dockerfile and k8/deployment.yaml
                        def dockerfileExists = sh(script: "test -f ${module}/Dockerfile && echo true || echo false", returnStdout: true).trim()
                        def deploymentExists = sh(script: "test -f ${module}/k8/deployment.yaml && echo true || echo false", returnStdout: true).trim()

                        if (dockerfileExists == 'true' && deploymentExists == 'true') {
                            echo "Building Docker image for module: ${module}"

                            // Build the Docker image targeting the local Nexus repository
                            sh """
                            cd ${module}
                            docker build --no-cache -t host.docker.internal:5000/${module}:latest .
                            cd ..
                            """

                            // Push the Docker image to the local Nexus repository
                            echo "Pushing Docker image for module: ${module} to Nexus"
                            sh """
                            docker push host.docker.internal:5000/${module}:latest
                            """
                        } else {
                            echo "Skipping Docker build for module ${module}. Dockerfile or deployment.yaml not found."
                        }
                    }
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    def modules = CHANGED_MODULES.tokenize('\n')
                    for (module in modules) {
                        // Check if the module has a k8/deployment.yaml before deploying
                        def deploymentExists = sh(script: "test -f ${module}/k8/deployment.yaml && echo true || echo false", returnStdout: true).trim()

                        if (deploymentExists == 'true') {
                            echo "Deploying ${module} to Kubernetes"
                            // Apply the Kubernetes deployment YAML file
                            sh """
                            kubectl apply -f ${module}/k8/deployment.yaml
                            """
                        } else {
                            echo "Skipping deployment for module ${module}. Deployment YAML not found."
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            // Archive build artifacts and reports
            archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
            archiveArtifacts artifacts: "${REPORT_FILE}", fingerprint: true
            echo 'Build and deployment process completed!'
        }
        failure {
            echo 'Pipeline failed. Check the failure report for details.'
        }
    }
}
